#!/usr/bin/env node
/* eslint no-console: 0 */
const DEPRECATED_RULES = [
  // react
  'react/no-comment-textnodes',
  'react/require-extension',
  'react/wrap-multilines',
  // babel
  'babel/generator-star-spacing',
  'babel/array-bracket-spacing',
  'babel/object-shorthand',
  'babel/arrow-parens',
  'babel/flow-object-type',
  'babel/func-params-comma-dangle',
];

// TODO(fatih) remove this
const IGNORED_RULES = [
  'babel/no-invalid-this',
  'flowtype/boolean-style',
  'flowtype/define-flow-type',
  'flowtype/delimiter-dangle',
  'flowtype/generic-spacing',
  'flowtype/no-dupe-keys',
  'flowtype/no-primitive-constructor-types',
  'flowtype/no-weak-types',
  'flowtype/require-parameter-type',
  'flowtype/require-return-type',
  'flowtype/require-valid-file-annotation',
  'flowtype/require-variable-type',
  'flowtype/semi',
  'flowtype/sort-keys',
  'flowtype/space-after-type-colon',
  'flowtype/space-before-generic-bracket',
  'flowtype/space-before-type-colon',
  'flowtype/type-id-match',
  'flowtype/union-intersection-spacing',
  'flowtype/use-flow-type',
  'flowtype/valid-syntax',
  'react/jsx-tag-spacing',
  'react/no-array-index-key',
  'react/require-default-props',
];

// Prints rules recognized by ESLint that don't appear in the given config
// preset. It helps with upgrading the preset when new ESLint gets released.
const getRuleFinder = require('eslint-find-rules');
const specifiedFile = process.argv[2];
const ruleFinder = getRuleFinder(specifiedFile);

const missingRules = ruleFinder.getUnusedRules()
.filter(rule => DEPRECATED_RULES.indexOf(rule) === -1)
.filter(rule => IGNORED_RULES.indexOf(rule) === -1);

if (missingRules.length) {
  console.log(`New rules to add to the config: ${missingRules.join(', ')}.`);
  process.exit(1);
}
